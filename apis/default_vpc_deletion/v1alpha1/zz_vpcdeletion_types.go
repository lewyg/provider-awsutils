// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCDeletionInitParameters struct {
}

type VPCDeletionObservation struct {

	// (String) The ID of the VPC that was deleted.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VPCDeletionParameters struct {
}

// VPCDeletionSpec defines the desired state of VPCDeletion
type VPCDeletionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCDeletionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPCDeletionInitParameters `json:"initProvider,omitempty"`
}

// VPCDeletionStatus defines the observed state of VPCDeletion.
type VPCDeletionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCDeletionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCDeletion is the Schema for the VPCDeletions API. Deletes the default VPC along with the child resources of the VPC including Subnets, Route Tables, NACLs and Internet Gateways in the configured region. Best-practices call for not using the default VPC, but rather, creating a new set of VPCs as necessary. AWS Security Hub will flag the default VPCs as non-compliant if they aren't configured with best-practices. Rather than jumping through hoops, it's easier to delete to default VPCs. Please note that applying this resource is destructive and nonreversible.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsutils}
type VPCDeletion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCDeletionSpec   `json:"spec"`
	Status            VPCDeletionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCDeletionList contains a list of VPCDeletions
type VPCDeletionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCDeletion `json:"items"`
}

// Repository type metadata.
var (
	VPCDeletion_Kind             = "VPCDeletion"
	VPCDeletion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCDeletion_Kind}.String()
	VPCDeletion_KindAPIVersion   = VPCDeletion_Kind + "." + CRDGroupVersion.String()
	VPCDeletion_GroupVersionKind = CRDGroupVersion.WithKind(VPCDeletion_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCDeletion{}, &VPCDeletionList{})
}
